#include <iostream>
using namespace std;

int findPair(int, int ,int[][5]);
int intoRects2(int[][5], int[][5], int , int, int&);
int getSize(int[][5]);
int printRects(int[][5], int );
int getDistance(int[][5], int, int[]);
int findIndex(int[], int);
int readEvenN();
int readRects1(int[][5],int );

int main()
{
    int n=readEvenN();

    cout<<"Enter data sets: "<<endl;
    int rects1[n][5]={0};
    // a array with n rows and 5 columns. 4 cells to store the input and another one for a int
    //to keep track for next stage.

    //readin the inputs
    readRects1(rects1, n);
    cout<<"rects1: "<<endl;
    printRects(rects1,n);


    //now we need to sort the rects1 into rects2, where the same rects are put next to each other
    int rects2[n][5]={0};
    int rects2_actual_size=0;

    for (int i=0; i<n; i++){
        if (rects1[i][4]==0){
            int y=rects1[i][1];
            rects1[i][4]=1;
            cout<<"rects1: "<<endl;
            printRects(rects1,n);
            int pair_index=findPair(y, n, rects1);
            intoRects2(rects1, rects2, i, pair_index, rects2_actual_size);
        }
    }

    cout<<"rects1: "<<endl;
    printRects(rects1,n);

    cout<<"rects2: "<<endl;
    printRects(rects2,n);

    int nrects=n/2;
    cout<<"num of rects: "<<nrects<<endl;

    int distance[nrects]={0};

    cout<<"distance list before update: "<<endl;
    for (int i=0; i<nrects; i++){
        cout<<distance[i]<<" | ";

    }
    cout<<endl;

    getDistance(rects2, nrects, distance);

    cout<<"distance list after update: "<<endl;
    for (int i=0; i<nrects; i++){
        cout<<distance[i]<<" | ";
    }
    cout<<endl;

    int index=findIndex(distance, nrects);
    cout<<"index: "<<index<<endl;

    for (int i=0; i<4;i++){
        cout<<rects2[(index+1)*2-1][i]<<" | ";
    }
    cout<<endl;
    for (int i=0; i<4;i++){
        cout<<rects2[(index+1)*2-2][i]<<" | ";
    }


    return 0;
}

int readRects1(int l[][5], int n){
    for (int r=0; r<n; r++){
        for (int c=0; c<4; c++){
            cin>>l[r][c];
        }
        l[r][4]=0;
        //if this rectangle has been checked, then we change 1 to 0;
    }

}
int readEvenN(){
    int n=0;
    while(true){
        cin>>n;
        if (n%2==0){
            return n;
        }else{
            cout<<"Please enter even number of sets! Reenter: ";
        }
    }
}
int findIndex(int l[], int s ){
    int min=l[0];
    int i=0;
    for (i=0; i<s; i++){
        if (l[i]<min){
            return i;
        }
    }
    cout<<"here : "<<i<<endl;
    return i;
}

int getDistance(int l[][5], int n, int dlist[]){
    //n is the number of rectangles
    for (int i=0; i<n; i++){
        int d=0;
        if (l[2*i+1][0] >= l[2*i][0]){
            d=l[2*i+1][0] - l[2*i][0]-l[2*i][2];
        }else{
            d=-l[2*i+1][0] + l[2*i][0]-l[2*i][2];
        }
        dlist[i]=d;

    }
    return 0;
}

int printRects(int l[][5], int s){

    for (int r=0; r<s; r++){
        cout<<(r+1)<<": ";
        for (int c=0; c<5; c++){
            cout<<l[r][c];
            cout<<" | ";
        }
        cout<<endl;
    }
    return 0;
}
int getSize(int l[][5]){
    return(sizeof(l)/sizeof(l[0][0])/4);
}

int intoRects2(int rects1[][5], int rects2[][5], int i1, int i2, int &index){
    //update rects1 to rects2

    for (int j=0; j<4; j++){
        rects2[index][j]=rects1[i1][j];
    }
    index++;

    for (int j=0; j<4; j++){
        rects2[index][j]=rects1[i2][j];
    }
    index++;
}

int findPair(int y, int nrect, int rects1[][5]){
    //y is the y index of the rect; nrect is the number of rows in the array.
    for (int i=0; i<nrect; i++){
        if (rects1[i][1]==y && rects1[i][4]==0){
            rects1[i][4]=1;
            return i;
        }
    }

}
